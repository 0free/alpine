#!/bin/bash

bootSize='199MiB'
swapSize='4096MiB'
timezone='Asia/Muscat'
mirror='https://dl-cdn.alpinelinux.org/alpine'
arch='x86_64'
branch='edge'
version='v3.16'
kernel_edge='5.19.8-0-edge'
kernel_lts='5.15.67-0-lts'
pool='rpool'
hostname='linux'
user='user'
password='0000'

packages_list() {

    packages+=(
        # alpine
        alpine-base alpine-baselayout alpine-baselayout-data alpine-conf alpine-keys alpine-release
        # openrc
        openrc openrc-bash-completion openrc-settingsd openrc-settingsd-openrc
        # busybox
        busybox
        # busybox@edge
        busybox-openrc busybox-mdev-openrc busybox-binsh busybox-suid
        # musl
        musl musl-utils musl-locales
        # dbus
        dbus dbus-openrc dbus-libs dbus-x11
        # ibus
        ibus ibus-bash-completion
        # udev
        udev-init-scripts udev-init-scripts-openrc
        # eudev
        eudev eudev-openrc eudev-libs
        # hardware
        hwids-net hwids-pci hwids-udev hwids-usb
        # xorg
        xauth xinit xorg-server xorg-server-common
        # wayland
        xwayland
        # mesa
        mesa mesa-dri-gallium
        # vulkan
        vulkan-loader vulkan-tools
        # polkit/elogind
        polkit-openrc polkit-common polkit-elogind polkit-elogind-libs
        elogind elogind-openrc elogind-bash-completion
        # input
        xf86-input-evdev xf86-input-mtrack xf86-input-synaptics
        # base
        sudo bash bash-completion build-base fakeroot shadow rsyslog rsyslog-openrc sed attr dialog which grep pciutils usbutils binutils findutils readline lsof less nano curl wget coreutils gawk diffutils autoconf
        # util-linux
        util-linux util-linux-openrc util-linux-login util-linux-misc util-linux-bash-completion
        # utilities
        openssl ncurses-dev
        # git
        git git-bash-completion
        # compression
        brotli-libs zstd zlib zip lz4 lzo unzip xz bzip2
        # disks
        e2fsprogs lvm2 gptfdisk dosfstools mtools ntfs-3g ntfs-3g-progs xfsprogs hfsprogs exfatprogs f2fs-tools udftools sfdisk sgdisk mmc-utils jfsutils
        udisks2 udisks2-bash-completion 
        # network
        ethtool ethtool-bash-completion
        networkmanager networkmanager-openrc networkmanager-common networkmanager-bash-completion networkmanager-elogind
        # firewall
        ufw ufw-openrc ufw-bash-completion
        iptables iptables-openrc
        # sound
        alsa-plugins-pulse alsa-lib
        # bluetooth
        bluez-alsa bluez-alsa-openrc bluez-alsa-utils
        # browser
        chromium
        # fonts
        font-hack font-adobe-source-code-pro
        font-arabic-misc font-noto-arabic
        font-opensans font-xfree86-type1
        ttf-font-awesome ttf-dejavu ttf-freefont ttf-droid
        # keyboard
        setxkbmap xkbcomp xkeyboard-config
        # timezone
        tzdata
        # colord
        colord colord-bash-completion colord-gtk
        # efi
        efibootmgr
    )

    if grep -q btrfs /root/list; then
        packages+=(
            # btrfs
            btrfs-progs btrfs-progs-extra btrfs-progs-libs btrfs-progs-bash-completion
            snapper snapper-bash-completion
        )
    fi

    if ! grep -q VirtualBox /root/list; then
        packages+=(
            # hardware
            bolt pciutils
            # firmware
            fwupd fwupd-openrc fwup-bash-completion fwupd-efi fwupd-plugin-bios fwupd-plugin-cpu fwupd-plugin-tpm fwupd-plugin-nvme fwupd-plugin-ata
            # mesa
            mesa-dri-gallium mesa-va-gallium mesa-vdpau-gallium mesa-gl mesa-glapi mesa-egl mesa-gles mesa-gbm
            mesa-vulkan-layers
            # intel GPU
            mesa-vulkan-intel intel-media-driver
            # vulkan
            vulkan-loader vulkan-tools
            # nvidia GPU
            nvidia-src
            # wireless
            wireless-regdb iwd iwd-openrc
            # network
            ethtool ethtool-bash-completion
            rsync rsync-openrc
            networkmanager-wwan networkmanager-wifi networkmanager-bluetooth networkmanager-openvpn networkmanager-initrd-generator
        )
    else
        packages+=(
            virtualbox-guest-additions virtualbox-guest-additions-openrc virtualbox-guest-additions-x11
        )
    fi

    if grep -q gnome /root/list; then
        packages+=(
            # gnome session
            gdm gdm-openrc mutter mutter-schemas gnome-desktop gnome-desktop-lang gnome-session
            gnome-shell gnome-shell-schemas gnome-shell-extensions gnome-menus
            gnome-control-center gnome-control-center-bash-completion
            gnome-tweaks gnome-colors-common gsettings-desktop-schemas
            tracker tracker-bash-completion
            pinentry-gnome
            # connector
            chrome-gnome-shell gnome-browser-connector
            # theme
            adwaita-icon-theme hicolor-icon-theme
            # gnome tools
            gnome-keyring gnome-terminal gnome-disk-utility gnome-system-monitor file-roller
            # nautilus
            nautilus
            # text
            gedit gedit-plugins py3-cairo
            # firmware
            gnome-firmware-updater
            # gnome theme
            arc-theme arc-dark arc-dark-gnome
            # gedit spell check
            aspell hunspell hunspell-en nuspell
            # network
            network-manager-applet
            # firewall
            gufw
        )
    fi

    if grep -q kde /root/list; then
        packages+=(
            # sddm
            sddm sddm-openrc sddm-kcm sddm-breeze
            # plasma
            plasma-desktop
            plasma-workspace plasma-workspace-lang plasma-workspace-libs
            plasma-settings
            plasma-framework
            plasma-integration plasma-browser-integration
            plasma-thunderbolt plasma-disks
            # system
            systemsettings ksysguard
            # kwallet
            kwallet kwallet-pam kwalletmanager
            # theme
            breeze-gtk breeze-icons
            # bluetooth
            bluedevil
            # power
            powerdevil
            # wayland
            kwayland
            # network
            plasma-nm
            # firewall
            iproute2 net-tools
            # audio
            plasma-pa kmix
            # kde
            ki18n kwin kinit kcron kdecoration krecorder kscreen kscreenlocker kmenuedit konsole kde-gtk-config
            # file manager
            dolphin dolphin-plugins kfind
            # text
            kate kate-common
            # archive
            ark
        )
    fi

    if grep -q workstation /root/list; then

        if grep -q gnome /root/list; then
            packages+=(
                # gnome apps
                gnome-software gnome-software-plugin-apk gnome-software-plugin-flatpak gnome-photos gnome-music gnome-clocks gnome-contacts gnome-calculator gnome-maps gnome-logs gnome-remote-desktop gnome-screenshot gnome-boxes gnome-calendar gnome-sound-recorder gnome-font-viewer gnome-colors gnome-bluetooth gnome-podcasts gnome-characters gnome-builder gnome-shortwave getting-things-gnome sushi simple-scan
                # config
                dconf dconf-bash-completion
                # web
                epiphany
                # documents
                evince evince-nautilus
                # photos
                gthumb eog shotwell
                # mail
                geary
                # sound
                gnome-metronome lollypop
                # other
                glade ghex baobab confy
                # bluetooth
                blueman
                # flatpak
                xdg-desktop-portal xdg-desktop-portal-gnome xdg-desktop-portal-gtk xdg-user-dirs
            )
        fi

        if grep -q kde /root/list; then
            packages+=(
                # plasma
                plasma-systemmonitor plasma-firewall
                plasma-camera plasma-videoplayer plasma-phonebook
                # kde
                kactivities kactivities-stats kactivitymanagerd
                shelf knetattach kmail ktorrent kdeconnect akregator kphotoalbum kmymoney kdeedu-data kalk rocs calligra marble clip buho vvave communicator qrca step kmousetool krename kcolorchooser kunitconversion
                # widgets
                kconfigwidgets
                # print
                print-manager
                # screen
                spectacle kscreenlocker kruler
                # image
                gwenview
                # audio
                juk kwave elisa
                # video
                kmediaplayer kdenlive dragon haruna
                # YouTube
                plasmatube audiotube
                # camera
                kamera kamoso
                # spelling
                sonnet
                # office
                kcalc okular skanlite
                # input
                plasma-remotecontrollers
                # draw
                kolourpaint
                # math
                cantor kalgebra kig kmplot
                # music
                minuet
                # flatpak
                xdg-desktop-portal xdg-desktop-portal-kde xdg-user-dirs
                # hex
                okteta
            )
        fi

        packages+=(
            # shell
            starship starship-bash-completion
            # wine
            wine vkd3d
            # thumbnail
            ffmpegthumbnailer
            # mkimage
            abuild alpine-sdk apk-tools mkinitfs xorriso squashfs-tools
            # fonts tools
            font-manager font-viewer
            # office
            libreoffice-base libreoffice-common libreoffice-writer libreoffice-math libreoffice-calc libreoffice-draw libreoffice-lang-en_us libreoffice-lang-ar
            # google
            google-authenticator
            # mail
            thunderbird
            # music
            amberol musescore
            # audio
            ardour tenacity calf calf-jack calf-lv2
            # video edit
            shotcut pitivi x265
            # video subtitle
            gaupol
            # book
            foliate
            # openvc
            opencv py3-opencv
            # python
            black
            # JavaScript
            npm npm-bash-completion nodejs esbuild reason
            # code
            code-oss code-oss-bash-completion lapce codeblocks
            # code format
            prettier tidyhtml
            # html/css to pdf
            weasyprint
            # screenshot
            flameshot
            # electronic
            kicad
            # screen
            obs-studio kooha peek
            # video
            mplayer totem celluloid
            # photos
            krita gimp inkscape gmic curtail
            # printer
            cups cups-openrc cups-pdf bluez-cups
            # driver
            xinput gkraken ccid solaar razercfg razercfg-gui razergenie openrazer piper
            # math
            mathjax2
            # finance
            homebank
            # 2d
            tiled
            # 3d
            blender freecad godot leocad solvespace goxel
            # 3d printer
            cura
            # text editor
            kakoune
            # mauikit
            mauikit mauikit-accounts mauikit-filebrowsing mauikit-imagetools mauikit-texteditor
            # bitcoin
            bitcoin bitcoin-openrc
            # game emu
            pcsx2 dolphin-emu xwiimote pcsxr
            # rust
            rust rustfmt rust-analysis cargo
            # go
            go
            # php
            composer php82 php82-bcmath php82-bz2 php82-cgi php82-curl php82-common php82-phpdbg php82-dom php82-exif php82-fileinfo php82-fpm php82-gd php82-gettext php82-iconv php82-intl php82-litespeed php82-mbstring php82-mysqli php82-mysqlnd php82-opcache php82-openssl php82-phar php82-pear php82-session php82-snmp php82-soap php82-xml php82-zip
            # android
            gradle android-tools android-tools-bash-completion go-mtpfs scrcpy scrcpy-bash-completion
            # iPhone/iPod/mac
            ifuse ideviceinstaller idevicerestore libirecovery libirecovery-progs libideviceactivation libimobiledevice libimobiledevice-progs
            # pdf
            corepdf pdfarranger poppler
            # drives
            onedrive onedrive-openrc
            # twitter
            cawbird
            # Corsair
            ckb-next
            # RGB
            openrgb
            # plan
            planner
            # music player
            amberol sublime-music
            # music server
            navidrome navidrome-openrc
            # youtube
            ffmpeg yt-dlp yt-dlp-bash-completion pipe-viewer-gtk audiotube tartube youtube-viewer-gtk
            # javascript/css
            minify minify-bash-completion
            # photos
            darktable
            # drawing
            drawing
            # remote
            remmina
            # touch
            touchegg touchegg-openrc
            # CPU
            corectrl
            # cctv
            zoneminder zoneminder-openrc
            # iso
            thumbdrives
        )

        if grep -q gnome /root/list; then
            packages+=(
                libreoffice-gnome
            )
        fi

    fi

    if grep -q server /root/list; then
        packages+=(
            # system
            rsyslog rsyslog-openrc rsyslog-mysql rsyslog-tls rsyslog-http
            # SSL/TLS
            certbot
            # php
            php81 php81-bcmath php81-brotli php81-bz2 php81-cgi php81-curl php81-common php81-phpdbg php81-dom php81-exif php81-fileinfo php81-fpm php81-gd php81-gettext php81-iconv php81-intl php81-litespeed php81-mbstring php81-memcache php81-memcached php81-mysqli php81-mysqlnd php81-opcache php81-openssl php81-phar php81-pear php81-redis php81-session php81-snmp php81-soap php81-xml php81-zip php81-pecl-imagick
            # php admin
            phpmyadmin
            # database
            mariadb
            # mail
            postfix postfix-openrc postfix-mysql postfix-pcre postfixadmin
            dovecot dovecot-openrc dovecot-submissiond dovecot-ldap dovecot-lmtpd dovecot-pop3d dovecot-sql dovecot-mysql
            opendkim opendkim-utils
            cyrus-sasl
            # tools
            imagemagick redis redis-openrc memcached memcached-openrc
            # server
            litespeed litespeed-openrc
            # http
            hetty
            # cab
            cabextract
        )
    fi

}

menu() {

    echo -e "\n --> $1:\n"
    output=$2
    shift 2
    options=($@)
    i=0
    while true; do
        for option in ${options[@]}; do
            if [[ $option == ${options[$i]} ]]; then
                echo -e "\t\e[7m$option\e[0m"
            else
                echo -e "\t$option"
            fi
        done
        read -sn3 key
        if [[ $key == $(echo -en "\e[A") ]] && [[ $i -gt 0 ]]; then
            i=$(($i-1))
        elif [[ $key == $(echo -en "\e[B") ]] && [[ $i -lt ${#options[@]} ]]; then
            i=$(($i+1))
        elif [[ -z $key ]]; then
            break
        fi
        echo -en "\e[${#options[@]}A"
    done
    printf -v $output "${options[$i]}"

}

setup_drive() {

    if [ -f /root/list ]; then
        rm -r /root/list
    fi

    echo '# created by Saif AlSubhi'
    printf -- '-%.0s' {1..100}; echo ''
    lsblk -o name,type,fstype,size,fsused,fsuse%,mountpoint,label,model
    printf -- '-%.0s' {1..100}; echo ''

    drives=($(ls /dev/ | grep '^nvme.\{3\}$\|^sd.\{1\}$'))

    for i in ${!drives[@]}; do
        drives[$i]="/dev/${drives[$i]}"
    done

    menu 'select a drive' drive ${drives[@]}

    if ls $drive* | grep -q "$drive.\{1\}$|$drive.\{2\}$"; then
        partitions=($(ls $drive*))
        menu 'select a root partition or use the complete drive ' partition ${partitions[@]}
        if [[ $drive != $partition ]] ; then
            root_drive=$partition
            partitions=($(ls $drive* | grep -v $drive | grep -v $partition | grep "$drive.\{1\}$"))
            menu 'select a boot partition to mount ' partition ${partitions[@]}
            boot_drive=$partition
        fi
    fi

    filesystems=(btrfs zfs xfs ext4 exfat ntfs)
    menu 'select a filesystem' filesystem ${filesystems[@]}

    computers=(minimal workstation server VirtualBox)
    menu 'select a computer' computer ${computers[@]}

    desktops=(gnome kde none)
    menu 'select a desktop' desktop ${desktops[@]}

    bootloaders=(rEFInd grub gummiboot limine syslinux efibootmgr clover)
    menu 'select a bootloader' bootloader ${bootloaders[@]}

    echo -e "\n"

    if ! test sgdisk; then
        echo ">>> installing sgdisk"
        apk add sgdisk
    fi

    if [[ ! $root_drive ]]; then

        echo ">>> wiping filesystm"
        wipefs -a -f $drive
        echo ">>> deleting partitions"
        sgdisk -Z $drive
        echo ">>> creating GPT"
        sgdisk -o -U $drive

        echo ">>> creating boot partition"
        sgdisk -n 0:0:+$bootSize -c 0:BOOT -t 0:ef00 $drive
        if ls $drive | grep nvme; then
            boot_drive=$drive"p1"
        else
            boot_drive=$drive"1"
        fi

        echo ">>> creating swap partition"
        sgdisk -n 0:0:+$swapSize -c 0:SWAP -t 0:8200 $drive
        if ls $drive | grep nvme; then
            swap_drive=$drive"p2"
        else
            swap_drive=$drive"2"
        fi

        echo ">>> creating root partition"
        if [[ $filesystem == zfs ]]; then
            sgdisk -n 0:0:0 -c 0:ROOT -t 0:bf00 $drive
        else
            sgdisk -n 0:0:0 -c 0:ROOT -t 0:8300 $drive
        fi
        if ls $drive | grep nvme; then
            root_drive=$drive"p3"
        else
            root_drive=$drive"3"
        fi

        echo ">>> reading partition tables"
        mdev -s
        mdev -s

        echo ">>> creating boot filesystem"
        mkfs.vfat -F32 -n BOOT $boot_drive

        if [[ $swap_drive ]]; then
            echo ">>> creating swap filesystem"
            mkswap $swap_drive
        fi

    fi

    echo ">>> creating root filesystem"
    if [[ $filesystem == zfs ]]; then
        create_zfs
        set_zfs
    elif [[ $filesystem == btrfs ]]; then
        mkfs.btrfs -f -L btrfs $root_drive
    elif [[ $filesystem == ext4 ]]; then
        mkfs.ext4 -L ext4 $root_drive
    elif [[ $filesystem == exfat ]]; then
        mkfs.exfat -f -L exfat $root_drive
    elif [[ $filesystem == ntfs ]]; then
        mkfs.ntfs -f -C -L ntfs $root_drive
    elif [[ $filesystem == xfs ]]; then
        mkfs.xfs -f -L xfs $root_drive
    fi

    echo ">>> adding options"
    echo "drive=$drive" > /root/list
    echo "boot_drive=$boot_drive" >> /root/list
    echo "swap_drive=$swap_drive" >> /root/list
    echo "root_drive=$root_drive" >> /root/list
    echo "filesystem=$filesystem" >> /root/list
    echo "computer=$computer" >> /root/list
    echo "desktop=$desktop" >> /root/list
    echo "bootloader=$bootloader" >> /root/list

    mount_root
    mount_boot
    install_base

}

create_zfs() {

    echo ">>> loading ZFS modules"
    modprobe zfs
    echo ">>> checking ZFS modules"
    if ! lsmod | grep -qi zfs; then
       echo 'ERROR: ZFS modules are missing'
       create_rootfs
    fi
    echo ">>> creating ZFS pool"
    zpool create -f -o ashift=9 -o autotrim=on \
    -o cachefile=/etc/zfs/zpool.cache \
    -O recordsize=8192 -O compression=lz4 -O acltype=posixacl \
    -O devices=off -O xattr=sa -O relatime=off -O atime=off \
    -O dnodesize=legacy -O normalization=formD \
    -O canmount=noauto -O mountpoint=/ -R /mnt $pool $root_drive
    echo ">>> checking ZFS pool"
    zpool status

}

set_zfs() {

    echo ">>> setting ZFS pool as rootfs"
    zpool set bootfs=$pool $pool
    echo ">>> setting ZFS cache"
    mkdir -p /mnt/etc/zfs
    cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache
    echo ">>> adding ZFS options"
    mkdir -p /mnt/etc/modprobe.d/
    echo "options zfs l2arc_noprefetch=0" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs l2arc_write_max=536870912" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs l2arc_write_boost=1073741824" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs l2arc_headroom=12" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_arc_max=536870912" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_arc_min=268435456" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_prefetch_disable=0" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_top_maxinflight=320" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_txg_timeout=15" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_scheduler=deadline" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_read_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_read_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_write_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_async_write_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_write_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_write_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_read_min_active=8" >> /mnt/etc/modprobe.d/zfs.conf
    echo "options zfs zfs_vdev_sync_read_max_active=32" >> /mnt/etc/modprobe.d/zfs.conf

}

mount_root() {

    if grep -q zfs /root/list; then
        echo ">>> exporting zpool"
        zpool export $pool
        echo ">>> importing zpool"
        zpool import $pool -d $root_drive -R /mnt/
        echo ">>> mounting zfs dataset"
        zfs mount $pool
        zfs mount -a
    else
        echo ">>> mounting root drive"
        mount $root_drive /mnt/
    fi

    if ! mountpoint -q /mnt; then
        exit
    fi

    if [ ! -d /mnt/boot/ ]; then
        mkdir -p /mnt/boot/
    fi

}

mount_boot() {

    echo ">>> mounting boot drive"
    mount $boot_drive /mnt/boot/
    if [ ! -d /mnt/boot/efi/ ]; then
        mkdir -p /mnt/boot/efi/
    fi

}

install_base() {

    echo ">>> updating packages"
    cat > /etc/apk/repositories <<EOF
$mirror/$branch/main
$mirror/$branch/community
$mirror/$branch/testing
#$mirror/$version/main
#$mirror/$version/community
EOF

    echo ">>> installing alpine-base"
    apk add --root=/mnt/ --initdb alpine-base --keys-dir /etc/apk/keys --repositories-file /etc/apk/repositories

    echo ">>> copying repositories"
    cp /etc/apk/repositories /mnt/etc/apk/repositories

    echo ">>> creating /dev/null"
    rm /mnt/dev/null
    cp /dev/null /mnt/dev/null
    chmod 0666 /mnt/dev/null

    echo ">>> loading modules"
    modprobe efivars

    set_network
    set_fstab
    setup_linux

}

set_network() {

    echo ">>> adding name resolution"
    echo 'nameserver 10.0.254.3' >> /mnt/etc/resolv.conf
    echo 'nameserver 1.0.0.1' >> /mnt/etc/resolv.conf
    echo 'nameserver 8.8.8.8' >> /mnt/etc/resolv.conf

    echo ">>> adding interfaces"
    cat > /mnt/etc/network/interfaces <<EOF
auto lo
iface lo inet loopback
EOF

}

set_fstab() {

    echo ">>> setting fstab"

    if grep -q zfs /root/list; then
        echo "$pool / $filesystem rw,nodev,noauto,xattr,posixacl 0 0" > /mnt/etc/fstab
    elif grep -q btrfs /root/list; then
        echo "$(blkid $root_drive -o export | grep ^UUID=) / $filesystem rw,ssd,nofail,discard,noatime 0 0" > /mnt/etc/fstab
    else
        echo "$(blkid $root_drive -o export | grep ^UUID=) / $filesystem rw.ssd,nofail,discard,noatime 0 0" > /mnt/etc/fstab
    fi

    echo "$(blkid $boot_drive -o export | grep ^UUID=) /boot vfat rw,noatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 0" >> /mnt/etc/fstab

    echo "$(blkid $swap_drive -o export | grep ^UUID=) none swap sw 0 0" >> /mnt/etc/fstab

}

setup_linux() {

    install_linux
    install_packages
    set_timezone
    set_host
    change_root

}

install_linux() {

    if grep -q VirtualBox /root/list; then
        if grep -q zfs /root/list; then
            list='linux-virt zfs-virt zfs zfs-openrc zfs-libs zfs-udev'
        else
            list='linux-virt'
        fi
    else
        if grep -q zfs /root/list; then
            list='linux-lts zfs-lts'
            list+=' linux-edge akms zfs-src'
            list+=' zfs zfs-openrc zfs-libs zfs-udev'
        else
            list='linux-lts linux-edge'
        fi
        list+=' amd-ucode intel-ucode'
        list+=' linux-firmware-intel'
        list+=' linux-firmware-i915'
        list+=' linux-firmware-amd'
        list+=' linux-firmware-amd-ucode'
        list+=' linux-firmware-amdgpu'
        list+=' linux-firmware-nvidia'
        list+=' linux-firmware-other'
        list+=' linux-firmware-rtlwifi'
        list+=' linux-firmware-rtl_bt'
        list+=' linux-firmware-rtl_nic'
        list+=' linux-pam'
    fi

    echo ">>> installing linux"
    apk add --root=/mnt/ $list

}

install_packages() {

    echo ">>> packages list"
    packages=''
    packages_list

    list=''
    for i in ${!packages[@]}; do
        list+=${packages[$i]}
        list+=' '
    done
    echo ">>> installing packages"
    apk add --root=/mnt/ $list
    apk fix --root=/mnt/

}

set_timezone() {

    echo ">>> setting timezone"
    if [ -f /mnt/usr/share/zoneinfo/$timezone ]; then
        install -Dm 0644 /mnt/usr/share/zoneinfo/$timezone /mnt/etc/localtime
        echo $timezone > /mnt/etc/timezone
    else
        read -p " --- timezone Asia/Muscat: " timezone
        set_timezone
    fi

}

set_host() {

    echo ">>> setting hostname"
    echo "$hostname" > /mnt/etc/hostname
    echo "127.0.0.1 localhost $hostname" > /mnt/etc/hosts
    echo "::1       localhost $hostname" >> /mnt/etc/hosts

}

change_root() {

    echo ">>> copying install script"
    cp /root/list /mnt/root/list
    cp /root/install /mnt/root/install

    echo ">>> changing root"
    echo '' > /mnt/root/chroot
    dir=(proc dev sys)
    for d in ${dir[@]}; do
        mount --bind /$d/ /mnt/$d/
    done
    chroot /mnt/ /bin/bash /root/install

}

configure() {

    disable_root
    create_user
    setup_desktop

}

disable_root() {

    usermod -s /bin/bash root
    echo ">>> changing root password"
    echo -en "$password\n$password" | passwd root
    echo -en "$password\n$password" | passwd root
    echo ">>> disabling root login"
    passwd -l root
    echo ">>> disabling root password"
    passwd -d root

}

create_user() {

    echo ">>> creating user"
    if id $user &>/dev/null; then
        userdel $user
    fi
    echo '%wheel ALL=(ALL) ALL' > /etc/sudoers.d/wheel
    chmod 0400 /etc/sudoers.d/wheel
    echo -en "$password\n$password" | adduser -h /home/$user -s /bin/bash -G wheel -g $user $user
    usermod -aG input,audio,video,netdev,usb,disk,lp,adm $user

}

setup_desktop() {

    enable_services
    configure_alpine
    make_initramfs
    add_commands
    setup_bootloader

}

enable_services() {

    echo ">>> enabling services"

    rc-update add devfs sysinit
    rc-update add dmesg sysinit
    rc-update add mdev sysinit
    rc-update add hwdrivers sysinit
    rc-update add udev sysinit
    rc-update add udev-trigger sysinit
    rc-update add dbus sysinit
    rc-update add udev-settle sysinit
    rc-update add udev-postmount sysinit

    rc-update add procfs boot
    rc-update add devfs boot
    rc-update add sysfs boot
    rc-update add root boot

    rc-update add modules boot
    rc-update add mtab boot
    rc-update add hwclock boot
    rc-update add save-keymaps boot
    rc-update add lvm boot
    rc-update add swap boot
    rc-update add localmount boot
    rc-update add sysctl boot
    rc-update add hostname boot
    rc-update add bootmisc boot
    rc-update add syslog boot
    rc-update add networking boot

    if grep -q zfs /root/list; then
        rc-update add zfs-import boot
        rc-update add zfs-mount boot
        rc-update add zfs-share boot
        rc-update add zfs-zed boot
        rc-update add zfs-load-key boot
    fi

    rc-update add elogind default
    rc-update add polkit default

    rc-update add networkmanager default
    rc-update add networkmanager-dispatcher default

    rc-update add bluealsa default
    rc-update add bluetooth default
    rc-update add ufw default

    if grep -q VirtualBox /root/list; then
        rc-update add virtualbox-guest-additions default
        rc-update add virtualbox-drm-client default
    else
        rc-update add iwd default
        rc-update add rsyncd default
        rc-update add fwupd default
    fi

    if grep -q gnome /root/list; then
        rc-update add gdm default
    fi

    if grep -q kde /root/list; then
        rc-update add sddm default
    fi

    if grep -q workstation /root/list; then
        rc-update add cupsd default
    fi

    if grep -q server /root/list; then
        rc-update add mariadb default
        rc-update add litespeed default
        rc-update add postfix default
        rc-update add dovecot default
        rc-update add opendkim default
        mkdir /var/mysql && chown -R mysql:mysql /var/mysql
        mkdir /var/log/mysql && chown -R mysql:mysql /var/log/mysql
    fi

    rc-update add mount-ro shutdown
    rc-update add killprocs shutdown
    rc-update add savecache shutdown

}

configure_alpine() {

    echo ">>> configuring alpine"

    sed -i 's|#unicode="NO"|unicode="YES"|' /etc/rc.conf
    sed -i 's|#rc_parallel="NO"|rc_parallel="YES"|' /etc/rc.conf
    sed -i 's|#rc_interactive="YES"|rc_interactive="NO"|' /etc/rc.conf
    sed -i 's|#rc_shell=/bin/sh|rc_shell=/bin/sh|' /etc/rc.conf
    sed -i 's|#rc_depend_strict="YES"|rc_depend_strict="NO"|' /etc/rc.conf
    sed -i 's|#rc_logger="NO"|rc_logger="YES"|' /etc/rc.conf
    sed -i 's|#rc_env_allow=".*"|rc_env_allow="*"|' /etc/rc.conf
    sed -i 's|#rc_hotplug=".*"|rc_hotplug="!net.*"|' /etc/rc.conf
    sed -i 's|#rc_send_sighup="NO"|rc_send_sighup="YES"|' /etc/rc.conf
    sed -i 's|#rc_timeout_stopsec="90"|rc_timeout_Stopsec="0"|' /etc/rc.conf
    sed -i 's|#rc_send_sigkill="YES"|rc_send_sigkill="YES"|' /etc/rc.conf
    sed -i 's|rc_tty_number=12|rc_tty_number=24|' /etc/rc.conf

    echo ">>> setting locales"
    echo 'LANG=en_US.UTF-8' > /etc/locale.conf
    echo 'LANG=ar_OM.UTF-8' >> /etc/locale.conf

    cat >> /etc/default/libc-locales <<EOF
en_US.UTF-8 UTF-8
en_US ISO-8859-1
EOF

    if [ -d /etc/NetworkManager/ ]; then
        cat > /etc/NetworkManager/NetworkManager.conf <<EOF
[main]
dhcp=internal
plugins=ifupdown,keyfile
[ifupdown]
managed=true
[device]
wifi.backend=iwd
EOF
    fi

    if ! grep -q "snd_seq" /etc/modules; then
        echo snd_seq >> /etc/modules
    fi

    if [ ! -d windows-11-icons/ ]; then
        echo ">>> cloning Windows-11-icons"
        git clone https://github.com/0free/windows-11-icons.git
        rm -r windows-11-icons/.git
        cp -rlf windows-11-icons/ /usr/share/icons/
        rm -r windows-11-icons/
    fi

    echo ">>> configuring firewall"
    sed -i 's|IPV6=yes|IPV6=no|' /etc/default/ufw
    sed -i 's|"DROP"|"REJECT"|g' /etc/default/ufw
    sed -i 's|ENABLED=no|ENABLED=yes|' /etc/ufw/ufw.conf

    if [ ! -d /home/$user/.config/ ]; then
        mkdir /home/$user/.config/
    fi

    if grep -q kde /root/list; then
        if [ ! -d kde/ ]; then
            echo ">>> configuring kde"
            git clone https://github.com/0free/kde.git
            cp -rlf /kde/config/* /home/$user/.config/
            rm -r kde/
        fi
    fi

    echo ">>> setting ~/"
    chown -R $user:wheel /home/$user/
    chown -R $user:wheel /home/$user/.config/
    chmod -R 700 /home/$user/
    chmod -R 700 /home/$user/.config/

}

configure_lightdm() {

    echo ">>> configuring lightdm"
    sed -i 's|#allow-guest=.*|allow-guest=false|' /etc/lightdm/lightdm.conf
    sed -i 's|#autologin-guest=.*|autologin-guest=false|' /etc/lightdm/lightdm.conf
    sed -i "s|#autologin-user=.*|autologin-user=$user|" /etc/lightdm/lightdm.conf
    sed -i 's|#autologin-user-timeout=.*|autologin-user-timeout=0|' /etc/lightdm/lightdm.conf
    sed -i 's|#autologin-in-background=.*|autologin-in-background=false|' /etc/lightdm/lightdm.conf
    sed -i 's|#user-session=.*|user-session=default|' /etc/lightdm/lightdm.conf
    sed -i 's|#greeter-session=.*|greeter-session=slick-greeter|' /etc/lightdm/lightdm.conf

}

make_initramfs() {

    echo ">>> installing mkinitfs"

    modules=(base nvme ata ide scsi usb lvm keymap virtio kms mmc)

    if grep -q zfs /root/list; then
        modules+=(zfs)
    fi
    if grep -q btrfs /root/list; then
        modules+=(btrfs)
    fi
    if grep -q xfs /root/list; then
        modules+=(xfs)
    fi
    if grep -q ext4 /root/list; then
        modules+=(ext4)
    fi

    if ! grep -q VirtualBox /root/list; then
        modules+=(i915 intel_agp)
        modules+=(amdgpu)
        modules+=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
    fi

    list=''
    for i in ${!modules[@]}; do
        list+=${modules[$i]}
        list+=' '
    done

    echo ">>> configuring mkinitfs"
    echo "features=\"$list\"" > /etc/mkinitfs/mkinitfs.conf

    #kernel_lts=$(apk search -e linux-lts | sed 's|-r.*||')
    #kernel_edge=$(apk search -e linux-edge | sed 's|-r.*||')

    if ! grep -q VirtualBox /root/list; then
        if [ ! -d /lib/modules/$kernel_edge ]; then
            mkdir /lib/modules/$kernel_edge
        fi
        echo ">>> building linux edge initial ramdisk"
        mkinitfs -b / -c /etc/mkinitfs/mkinitfs.conf -f /etc/fstab -o /boot/initramfs-edge $kernel_edge
    fi
    if [ ! -d  /lib/modules/$kernel_lts ]; then
        mkdir /lib/modules/$kernel_lts
    fi
    echo ">>> building linux LTS initial ramdisk"
    mkinitfs -b / -c /etc/mkinitfs/mkinitfs.conf -f /etc/fstab -o /boot/initramfs-lts $kernel_lts

}

add_commands() {

    echo ">>> adding bashrc"
    echo "" > /home/$user/.bashrc

    cat >> /home/$user/.bashrc <<EOF

export QT_IM_MODULE=ibus
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus

alias search='sudo apk search'
alias install='sudo apk add'
alias remove='sudo apk del'
alias update='
sudo apk fix
sudo apk update
sudo apk upgrade
'
alias c='clear'

alias disk='
lsblk -o name,type,mountpoints,size,fsused,fsuse%,uuid,model
'

alias fwupd='fwupdmgr get-devices && fwupdmgr refresh && fwupdmgr get-updates && fwupdmgr update'
alias youtube='yt-dlp -o \"~/%(title)s.%(ext)s\" -f \"bv[vcodec~=\"^((he|a)vc|h26[45])\"][height<=1080][fps<=60]+ba\" --merge-output-format mp4 --downloader ffmpeg --external-downloader ffmpeg --external-downloader-args ffmpeg:\"-ss 00:00:00 -to 00:00:00\"'

PS1='\[\033[1;36m\]\u\[\033[1;31m\]@\[\033[1;32m\]\h:\[\033[1;35m\]\w\[\033[1;31m\]\$\[\033[0m\]'

EOF

}

setup_bootloader() {

    if [[ ! $windows_boot ]]; then
        find_windows
    fi

    if grep -q rEFInd /root/list; then
        if ! grep -q alpine /boot/EFI/refind/refind.conf; then
            install_refind
        fi
    elif grep -q syslinux /root/list; then
        install_syslinux
    elif grep -q clover /root/list; then
        install_clover
    elif grep -q grub /root/list; then
        install_grub
    elif grep -q efibootmgr /root/list; then
        install_efibootmgr
    elif grep -q gummiboot /root/list; then
        install_gummiboot
    elif grep -q limine /root/list; then
        install_limine
    fi

    finish

}

find_windows() {

    echo ">>> looking for Windows"
    drives=($(ls /dev/ | grep '^nvme.\{3\}$\|^sd.\{1\}$'))

    if [ ! -d /windows/ ]; then
        mkdir /windows/
    fi

    for drive in ${drives[@]}; do
        drive="/dev/$drive"
        if ls $drive* | grep -q "$drive.\{1\}$|$drive.\{2\}$"; then
            partitions=($(ls $drive* | grep -v $drive))
            for partition in ${!partitions[@]}; do
                mount $partition /windows/
                if [ -f /EFI/Microsoft/Boot/BCD ]; then
                    echo ">>> copying Windows Boot Manager"
                    cp -rlf /windows/* /boot/
                    windows_drive=$drive
                    windows_boot=$partition
                    echo "windows_boot=$partition" >> /root/list
                elif [ -f /windows/Windows/Boot/EFI/bootmgfw.efi ]; then
                    windows_partition=$partition
                    echo "windows_partition=$partition" >> /root/list
                fi
                umount /windows/
            done
        fi
    done

    if [[ $windows_drive ]]; then
        echo ">>> creating efi records"
        efibootmgr -c --gpt --unicode -d $windows_drive -p 1 -L "Windows Boot" -l '\EFI\Boot\BOOTX64.EFI'
        efibootmgr -c --gpt --unicode -d $windows_drive -p 1 -L "Windows Boot Firmware" -l '\EFI\Microsoft\Boot\BOOTMGFW.EFI'
        efibootmgr -c --gpt --unicode -d $windows_drive -p 2 -L "Windows 11" -l '\Windows\Boot\EFI\bootmgfw.efi'
    fi

}

install_syslinux() {

    echo ">>> installing syslinux bootloader"
    apk add syslinux
    dd bs=440 count=1 conv=notrunc if=/usr/share/syslinux/gptmbr.bin of=$drive
    mkdir -p /boot/extlinux/
    extlinux --install /boot/extlinux/

}

install_limine() {

    echo ">>> installing limine bootloader"
    apk add limine limine-64
    cp /usr/share/limine/BOOTX64.EFI /boot/efi

    cat > /boot/limine.cfg <<EOF
TIMEOUT=1

:alpine Linux edge
PROTOCOL=linux
KERNEL_PATH=boot:///vmlinuz-edge
CMDLINE=root=
MODULE_PATH=boot:///initramfs-edge

:alpine Linux LTS
PROTOCOL=linux
KERNEL_PATH=boot:///vmlinuz-lts
CMDLINE=root=
MODULE_PATH=boot:///initramfs-lts

EOF

    if grep -q zfs /root/list; then
        sed -i "s|CMDLINE=root=|CMDLINE=root=zfs=$pool rw loglevel=1 quiet mitigations=off|" /boot/limine.cfg
    else
        sed -i "s|CMDLINE=root=|CMDLINE=root=$(blkid $root_drive -o export | grep ^UUID=) rw loglevel=1 quiet mitigations=off|" /boot/limine.cfg
    fi

}

install_clover() {

    if [ ! -d CloverBootLoader/ ]; then
        echo ">>> cloning CloverBootLoader"
        git clone https://github.com/0free/CloverBootLoader.git
        rm -r CloverBoorLoader/.git/
        echo ">>> copying clover bootloader"
        cp -rlf CloverBootLoader/* /boot/
        rm -r CloverBootLoader/
    fi

}

install_grub() {

    echo ">>> installing grub package"
    apk fix
    apk add grub grub-efi grub-bash-completion
    echo ">>> installing grub bootloader"
    grub-install --target=x86_64-efi --efi-directory=/boot/ --bootloader-id="alpine linux" $drive

    if [ ! -d /boot/grub/themes/ ]; then
        mkdir /boot/grub/themes
    fi

    if [ ! -d /boot/grub/themes/grub-theme/ ]; then
        echo ">>> cloning grub-theme"
        git clone https://github.com/0free/grub-theme.git
        rm -r grub-theme/.git/
        mv grub-theme/ /boot/grub/themes/
    fi

    sed -i "s|CLASS=\".*\"|CLASS=\"--class $( . /etc/os-release; echo \"$ID\")\"|" /etc/grub.d/10_linux
    sed -i "s|menuentry '\$LABEL'|menuentry '\$LABEL' --class efi|" /etc/grub.d/30_uefi-firmware

    cat > /etc/default/grub <<EOF
loglevel=0
GRUB_DEFAULT=0
GRUB_TIMEOUT=1
GRUB_SAVEDEFAULT=true
GRUB_DISABLE_RECOVERY=true
GRUB_THEME="/boot/grub/themes/grub-theme/theme.txt"
GRUB_DISABLE_OS_PROBER=false
GRUB_DISABLE_SUBMENU=y
GRUB_CMDLINE_LINUX_DEFAULT="rw rootfstype=$filesystem modules=sd-mod,usb-storage quiet splash=silent mitigations=off"
GRUB_CMDLINE_LINUX=""
GRUB_GFXMODE=1280x720,1920x1080,auto
EOF

    list='search'
    list+=' msdospart part_msdos part_gpt part_apple'
    list+=' usb usb_keyboard'
    list+=' linux chain btrfs xfs fat exfat ntfs'
    list+=' gfxterm gfxmenu'

    if grep -q zfs /root/list; then
        list+=' zfs zfscrypt zfsinfo'
        sed -i "s|GRUB_CMDLINE_LINUX=\"\"|GRUB_CMDLINE_LINUX=\"root=zfs=$pool\"|" /etc/default/grub
    else
        sed -i "s|GRUB_CMDLINE_LINUX=\"\"|GRUB_CMDLINE_LINUX=\"root=$(blkid $root_drive -o export | grep ^UUID=)\"|" /etc/default/grub
    fi

    echo "GRUB_PRELOAD_MODULES=\"$list\"" >> /etc/default/grub

    echo ">>> making grub config"
    grub-mkconfig -o /boot/grub/grub.cfg

    echo ">>> checking grub-probe"
    grub-probe /
    grub-probe -t fs -d $root_drive
    grub-probe -t fs_label -d $root_drive

}

install_efibootmgr() {

    if grep -q zfs /root/list; then
        root="zfs=$pool"
    else
        root=""
    fi

    efibootmgr -c --gpt --unicode -d $drive -p 1 -L "alpine Linux LTS" -l '\vmlinux-lts' -u "$root rw quiet initrd=\intel-ucode.img initrd=\amd-ucode.img initrd=\initramfs-lts"

    efibootmgr -c --gpt --unicode -d $drive -p 1 -L "alpine Linux edge" -l '\vmlinux-edge' -u "$root rw quiet initrd=\intel-ucode.img initrd=\amd-ucode.img initrd=\initramfs-edge"

}

install_gummiboot() {

    echo ">>> installing gummiboot"
    apk add gummiboot
    gummiboot install --path=/boot

    cp /usr/lib/gummiboot/gummibootx64.efi	/boot/efi/bootx64.efi

    efibootmgr -c --gpt --unicode -d $drive -p 1 -L "gummiboot" -l '\efi\bootx64.efi'

    mkdir -p /boot/loader/entries/

    echo ">>> configuring gummiboot"
    sed -i 's|#timeout 3|timeout 1|' /boot/loader/loader.conf
    sed -i 's|default .*|default boot-*|' /boot/loader/loader.conf

    echo ">>> adding entries to gummiboot"
    cat >> /boot/loader/entries/linux.conf <<EOF
title       alpine Linux edge
linux       /vmlinuz-edge
initrd      /amd-ucode.img
initrd      /intel-ucode.img
initrd      /initramfs-edge

title       alpine Linux LTS
linux       /vmlinuz-lts
initrd      /amd-ucode.img
initrd      /intel-ucode.img
initrd      /initramfs-lts
EOF

    if [ -f /usr/libexec/fwupd/efi/fwupdx64.efi ]; then
        echo ">>> adding fwupd to gummiboot"
        cp /usr/libexec/fwupd/efi/fwupdx64.efi /boot/
        echo "title firmware update" > /boot/loader/entries/fwupd.conf
        echo "efi /fwupdx64.efi" >> /boot/loader/entries/fwupd.conf
    fi

    if grep -q zfs /etc/fstab; then
        output="options zfs=rpool rw"
    else
        output="options root=UUID=$(blkid $root_drive -o export | grep ^UUID=) quiet architecture x64 rw"
    fi

    echo $output >> /boot/loader/entries/linux.conf

}

install_refind() {

    echo ">>> installing rEFInd bootloader"
    apk add refind

    refind-install --root /boot

    if [ -f /boot/EFI/refind/refind_x64.efi ]; then
        cp /boot/EFI/refind/refind_x64.efi /boot/EFI/refind/bootx64.efi
    fi

    if [ ! -d /boot/EFI/refind/drivers_x64/ ]; then
        mkdir -p /boot/EFI/refind/drivers_x64/
        echo ">>> copying rEFInd drivers"
        cp /usr/share/refind/drivers_x86_64/*.efi /boot/EFI/refind/drivers_x64/
        echo ">>> downloading efifs drivers"
        curl -LO github.com/pbatard/efifs/releases/download/v1.9/xfs_x64.efi
        curl -LO github.com/pbatard/efifs/releases/download/v1.9/zfs_x64.efi
        mv xfs_x64.efi /boot/EFI/refind/drivers_x64/
        mv zfs_x64.efi /boot/EFI/refind/drivers_x64/
    fi

    echo ">>> configuring rEFInd bootloader"

    if [[ $windows_drive ]]; then
        cat >> /boot/EFI/refind/refind.conf <<EOF

menuentry "Windows Boot Manager" {
    icon \EFI\refind\icons\os_win8.png
    volume $(blkid $windows_boot -o export | grep ^UUID= | sed 's|UUID=||')
    loader \EFI\Boot\BOOTX64.EFI
    options ''
}
menuentry "Windows Boot" {
    icon \EFI\refind\icons\os_win8.png
    volume $(blkid $windows_boot -o export | grep ^UUID= | sed 's|UUID=||')
    loader \EFI\Microsoft\Boot\BOOTMGFW.EFI
    options ''
}
menuentry "Windows 11" {
    icon \EFI\refind\icons\os_win8.png
    volume $(blkid $windows_boot -o export | grep ^UUID= | sed 's|UUID=||')
    loader \Windows\Boot\EFI\bootmgfw.efi
    options ''
}

EOF
    fi

    if grep -q VirtualBox /root/list; then
        cat >> /boot/EFI/refind/refind.conf <<EOF

menuentry "alpine Linux VirtualMachine" {
    icon /EFI/refind/icons/os_linux.png
    volume $(blkid $boot_drive -o export | grep ^UUID= | sed 's|UUID=||')
    loader /vmlinuz-virt
    initrd /initramfs-virt
    options 'root= initrd=/initramfs-lts'
}

EOF
    else
        cat >> /boot/EFI/refind/refind.conf <<EOF

menuentry "alpine Linux edge" {
    icon /EFI/refind/icons/os_linux.png
    volume $(blkid $boot_drive -o export | grep ^UUID= | sed 's|UUID=||')
    loader /vmlinuz-edge
    initrd /initramfs-edge
    options 'root= initrd=/amd-ucode.img initrd=/intel-ucode.img'
}
menuentry "alpine Linux LTS" {
    icon /EFI/refind/icons/os_linux.png
    volume $(blkid $boot_drive -o export | grep ^UUID= | sed 's|UUID=||')
    loader /vmlinuz-lts
    initrd /initramfs-lts
    options 'root= initrd=/amd-ucode.img initrd=/intel-ucode.img'
}

EOF
    fi

    if grep -q zfs /root/list; then
        sed -i "s|root=|root=zfs=$pool rw quiet mitigations=off|g" /boot/EFI/refind/refind.conf
    else
        sed -i "s|root=|root=$(blkid $root_drive -o export | grep ^UUID=) rw quiet mitigations=off|g" /boot/EFI/refind/refind.conf
    fi

    sed -i 's|timeout 20|timeout 2|' /boot/EFI/refind/refind.conf
    sed -i 's|#loglevel 1|loglevel 0|' /boot/EFI/refind/refind.conf
    sed -i 's|#enable_mouse|enable_mouse|' /boot/EFI/refind/refind.conf
    sed -i 's|#mouse_size 16|mouse_size 16|' /boot/EFI/refind/refind.conf
    sed -i 's|#mouse_speed 4|mouse_speed 4|' /boot/EFI/refind/refind.conf
    sed -i 's|#use_graphics_for .*|use_graphics_for osx,linux,windows|' /boot/EFI/refind/refind.conf
    sed -i 's|#scan_driver_dirs .*|scan_driver_dirs EFI/refind/drivers_x64|' /boot/EFI/refind/refind.conf
    sed -i 's|#scanfor|scanfor|' /boot/EFI/refind/refind.conf
    sed -i 's|#extra_kernel_version_strings |extra_kernel_version_strings linux-edge,linux-virt,|' /boot/EFI/refind/refind.conf

}

finish() {

    echo ">>> cleaning apks"
    apk del *-doc
    echo ">>> installation is completed"
    echo '' > /root/reboot
    exit 0

}

set -e

if [ -f /mnt/lib/apk/db/lock ]; then
    rm /mnt/lib/apk/db/lock
fi

if [ -f /mnt/root/reboot ]; then
    rm /mnt/root/install
    rm /mnt/root/reboot
    echo ">>> un-mounting & reboot"
    dir=(/mnt/boot/ /mnt/sys/ /mnt/dev/ /mnt/proc/)
    for d in ${dir[@]}; do
        umount $d
    done
    umount -Rf /mnt/
    if grep -q zfs /root/list; then
        zfs umount -a
        zpool export -a
    fi
    reboot
elif [ -f /mnt/root/chroot ]; then
    if [ -f /mnt/root/list ]; then
        cp /mnt/root/list /root/list
    fi
    change_root
else
    if [ -f /root/list ]; then
        drive=$(. /root/list; echo $drive)
        filesystem=$(. /root/list; echo $filesystem)
        boot_drive=$(. /root/list; echo $boot_drive)
        swap_drive=$(. /root/list; echo $swap_drive)
        root_drive=$(. /root/list; echo $root_drive)
        windows_drive=$(. /root/list; echo $windows_drive)
        windows_boot=$(. /root/list; echo $windows_boot)
        windows_partition=$(. /root/list; echo $windows_partition)
    fi
    if [ -f /root/chroot ]; then
        if grep -q "alias" /home/$user/.bashrc; then
            setup_bootloader
        elif [[ $(find /home -maxdepth 1 -type d | wc -l) -ne 1 ]]; then
            user=$(ls /home)
            setup_desktop
        else
            configure
        fi
    else
        if mountpoint -q /mnt; then
            if [ -d /mnt/root/ ]; then
                setup_linux
            else
                install_base
            fi
        else
            clear
            setup_drive
        fi
    fi
fi

#end
